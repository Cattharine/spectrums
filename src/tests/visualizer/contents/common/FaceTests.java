package tests.visualizer.contents.common;

import org.junit.Assert;
import org.junit.Test;
import visualizer.contents.common.Face;

import java.util.HashMap;
import java.util.HashSet;
import java.util.function.Consumer;
import java.util.function.Function;

public class FaceTests {
    @Test
    public void checkUpdatingMaxes() {
        check(this::checkUpdatingMaxes);
    }

    private void checkUpdatingMaxes(TestCase testCase) {
        var face = createFace(testCase);
        face.updateMaxes();
        Assert.assertEquals(getMu(testCase), face.getMu());
        face.updateMaxes();
        Assert.assertEquals(getMu(testCase), face.getMu());

        checkMaxVertexChecking(testCase, face);
    }

    @Test
    public void checkMaxVertexChecking() {
        check(this::checkMaxVertexChecking);
    }

    private void checkMaxVertexChecking(TestCase testCase) {
        var face = createFace(testCase);
        checkMaxVertexChecking(testCase, face);
        checkMaxVertexChecking(testCase, face);
    }

    private void checkMaxVertexChecking(TestCase testCase, Face face) {
        int[] isMaxVertex = getMaxVertexChecker(testCase);

        for (int i = 0; i < isMaxVertex.length; i++) {
            Assert.assertEquals(isMaxVertex[i] != 0, face.isMaxVertex(i));
            Assert.assertEquals(getMu(testCase), face.getMu());
        }
    }

    @Test
    public void checkGettingPaths() {
        check(this::checkGettingEdges);
        checkGettingPathsCase();
    }

    private void checkGettingEdges(TestCase testCase) {
        var face = createFace(testCase);
        var vertexes = face.info.getAllVertexes();

        for (var vertex : vertexes) {
            var paths = face.getPathsToClosestVertexes(vertex);
            for (var other : paths.keySet()) {
                for (var pathPart : paths.get(other)) {
                    int diff = other ^ pathPart;
                    Assert.assertEquals(0, diff & (diff - 1));
                }
            }
        }
    }

    private void checkGettingPathsCase() {
        var face = createFace(TestCase.F000T01101001);
        var expected = new HashMap[]{
                new HashMap<Integer, HashSet<Integer>>() {
                    {
                        put(0, new HashSet<>() {{
                            add(1);
                            add(2);
                            add(4);
                        }});
                        put(1, new HashSet<>() {{
                            add(3);
                        }});
                        put(3, new HashSet<>() {{
                            add(7);
                        }});
                    }
                },
                new HashMap<Integer, HashSet<Integer>>() {
                    {
                        put(1, new HashSet<>() {{
                            add(3);
                        }});
                        put(3, new HashSet<>() {{
                            add(7);
                        }});
                        put(2, new HashSet<>() {{
                            add(3);
                        }});
                        put(4, new HashSet<>() {{
                            add(5);
                        }});
                        put(5, new HashSet<>() {{
                            add(7);
                        }});
                    }
                }
        };

        Assert.assertEquals(expected[0], face.getPathsToClosestVertexes(1));
        Assert.assertEquals(expected[0], face.getPathsToClosestVertexes(1));
        Assert.assertEquals(expected[1], face.getPathsToClosestVertexes(7));
        Assert.assertEquals(expected[1], face.getPathsToClosestVertexes(7));

        face = createFace(TestCase.F010T01101001);
        var croppedExpected = new HashMap<>() {{
            put(0, new HashSet<>() {{
                add(1);
                add(4);
            }});
        }};
        Assert.assertEquals(croppedExpected, face.getPathsToClosestVertexes(1));
        Assert.assertEquals(croppedExpected, face.getPathsToClosestVertexes(1));
    }

    @Test
    public void checkClosestVertexChecking() {
        check(this::checkClosestVertexChecking);
    }

    private void checkClosestVertexChecking(TestCase testCase) {
        var face = createFace(testCase);
        checkClosestVertexChecking(testCase, face);
        checkClosestVertexChecking(testCase, face);
    }

    private void checkClosestVertexChecking(TestCase testCase, Face face) {
        int[][] isClosestVertex = getClosestVertexesChecker(testCase);

        for (int i = 0; i < isClosestVertex.length; i++) {
            for (int j = 0; j < isClosestVertex[i].length; j++) {
                Assert.assertEquals(isClosestVertex[i][j] != 0, isClosestVertexes(face, i, j));
            }
        }
    }

    private boolean isClosestVertexes(Face face, int vertex, int otherVertex) {
        var closest = face.getClosestVertexes(vertex);
        return closest.contains(otherVertex);
    }

    public void check(Consumer<TestCase> function) {
        var testCases = TestCase.values();

        for (var testCase : testCases) {
            function.accept(testCase);
        }
    }

    public int[][] getClosestVertexesChecker(TestCase testCase) {
        return switch (testCase) {
            case F0T00, F0T01, F0T10,
                    F1T00, F1T01, F1T10, F1T11,
                    F2T00, F2T01, F2T10, F2T11 -> new int[][]{
                    //0 1
                    {0, 0}, //0
                    {0, 0}, //1
            };
            case F0T11 -> new int[][]{
                    //0 1
                    {0, 1}, //0
                    {1, 0}, //1
            };
            case F00T0000, F00T0001, F00T0010, F00T0100, F00T1000,
                    F20T0000, F20T0001, F02T0001, F01T0001, F10T0001,
                    F02T0011, F10T0011, F01T0011,
                    F02T1001, F20T1001, F01T1001, F10T1001,
                    F02T1110, F20T1110 -> new int[][]{
                    //0 1  2  3
                    {0, 0, 0, 0}, //0
                    {0, 0, 0, 0}, //1
                    {0, 0, 0, 0}, //2
                    {0, 0, 0, 0}, //3
            };
            case F00T0011, F20T0011, F20T1111 -> new int[][]{
                    //0 1  2  3
                    {0, 0, 0, 0}, //0
                    {0, 0, 0, 0}, //1
                    {0, 0, 0, 1}, //2
                    {0, 0, 1, 0}, //3
            };
            case F00T0101, F02T1111 -> new int[][]{
                    //0 1  2  3
                    {0, 0, 0, 0}, //0
                    {0, 0, 0, 1}, //1
                    {0, 0, 0, 0}, //2
                    {0, 1, 0, 0}, //3
            };
            case F00T0110 -> new int[][]{
                    //0 1  2  3
                    {0, 0, 0, 0}, //0
                    {0, 0, 1, 0}, //1
                    {0, 1, 0, 0}, //2
                    {0, 0, 0, 0}, //3
            };
            case F00T1001 -> new int[][]{
                    //0 1  2  3
                    {0, 0, 0, 1}, //0
                    {0, 0, 0, 0}, //1
                    {0, 0, 0, 0}, //2
                    {1, 0, 0, 0}, //3
            };
            case F00T1010, F01T1110, F01T1111 -> new int[][]{
                    //0 1  2  3
                    {0, 0, 1, 0}, //0
                    {0, 0, 0, 0}, //1
                    {1, 0, 0, 0}, //2
                    {0, 0, 0, 0}, //3
            };
            case F00T1100, F10T1110, F10T1111 -> new int[][]{
                    //0 1  2  3
                    {0, 1, 0, 0}, //0
                    {1, 0, 0, 0}, //1
                    {0, 0, 0, 0}, //2
                    {0, 0, 0, 0}, //3
            };
            case F00T1110 -> new int[][]{
                    //0 1  2  3
                    {0, 1, 1, 0}, //0
                    {1, 0, 0, 0}, //1
                    {1, 0, 0, 0}, //2
                    {0, 0, 0, 0}, //3
            };
            case F00T1101 -> new int[][]{
                    //0 1  2  3
                    {0, 1, 0, 0}, //0
                    {1, 0, 0, 1}, //1
                    {0, 0, 0, 0}, //2
                    {0, 1, 0, 0}, //3
            };
            case F00T1011 -> new int[][]{
                    //0 1  2  3
                    {0, 0, 1, 0}, //0
                    {0, 0, 0, 0}, //1
                    {1, 0, 0, 1}, //2
                    {0, 0, 1, 0}, //3
            };
            case F00T0111 -> new int[][]{
                    //0 1  2  3
                    {0, 0, 0, 0}, //0
                    {0, 0, 0, 1}, //1
                    {0, 0, 0, 1}, //2
                    {0, 1, 1, 0}, //3
            };
            case F00T1111 -> new int[][]{
                    //0 1  2  3
                    {0, 1, 1, 0}, //0
                    {1, 0, 0, 1}, //1
                    {1, 0, 0, 1}, //2
                    {0, 1, 1, 0}, //3
            };
            case F000T00000000,
                    F000T00000001, F000T00000010, F000T00000100, F000T00001000,
                    F000T00010000, F000T00100000, F000T01000000, F000T10000000,
                    F222T00000001, F200T00000001, F020T00000001, F002T00000001,
                    F202T00000001, F010T00000001, F102T00000001,
                    F202T00000011, F002T00000011, F001T00000011, F102T00000011,
                    F010T00000110, F020T00000110, F100T00000110,
                    F200T00011000, F100T00011000, F020T00011000,
                    F010T00011000, F002T00011000, F001T00011000,
                    F100T00000111, F010T00000111, F001T00000111,
                    F101T01111111, F110T01111111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F000T00000011, F020T00000011, F020T00000111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 1}, //6
                    {0, 0, 0, 0, 0, 0, 1, 0}  //7
            };
            case F000T00000110, F200T00000110 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 1, 0}, //5
                    {0, 0, 0, 0, 0, 1, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F000T00011000 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 1, 0, 0, 0}, //3
                    {0, 0, 0, 1, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F000T00000111, F200T00000111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 1}, //5
                    {0, 0, 0, 0, 0, 0, 0, 1}, //6
                    {0, 0, 0, 0, 0, 1, 1, 0}  //7
            };
            case F000T00010110 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 1, 1, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 1, 0, 0, 1, 0}, //5
                    {0, 0, 0, 1, 0, 1, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F000T00011001 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 1}, //3
                    {0, 0, 0, 0, 0, 0, 0, 1}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 1, 0, 0, 0, 0}  //7
            };
            case F000T00001111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 1, 1, 0}, //4
                    {0, 0, 0, 0, 1, 0, 0, 1}, //5
                    {0, 0, 0, 0, 1, 0, 0, 1}, //6
                    {0, 0, 0, 0, 0, 1, 1, 0}  //7
            };
            case F000T00010111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 1}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 1}, //5
                    {0, 0, 0, 0, 0, 0, 0, 1}, //6
                    {0, 0, 0, 1, 0, 1, 1, 0}  //7
            };
            case F000T00011011 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 1}, //3
                    {0, 0, 0, 0, 0, 0, 1, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 1, 0, 0, 1}, //6
                    {0, 0, 0, 1, 0, 0, 1, 0}  //7
            };
            case F000T00011110 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 1, 1, 0}, //3
                    {0, 0, 0, 0, 0, 1, 1, 0}, //4
                    {0, 0, 0, 0, 1, 0, 0, 0}, //5
                    {0, 0, 0, 0, 1, 0, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F000T00111100 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 1, 0, 0, 0, 0}, //2
                    {0, 0, 1, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 1, 0, 0}, //4
                    {0, 0, 0, 0, 1, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F000T01101001 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 1, 0, 1, 0, 0, 1}, //1
                    {0, 1, 0, 0, 1, 0, 0, 1}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 1, 1, 0, 0, 0, 0, 1}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 1, 1, 0, 1, 0, 0, 0}  //7
            };
            case F000T00011111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 1}, //3
                    {0, 0, 0, 0, 0, 1, 1, 0}, //4
                    {0, 0, 0, 0, 1, 0, 0, 1}, //5
                    {0, 0, 0, 0, 1, 0, 0, 1}, //6
                    {0, 0, 0, 1, 0, 1, 1, 0}  //7
            };
            case F000T00111101 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 1, 0, 0, 0, 0}, //2
                    {0, 0, 1, 0, 0, 0, 0, 1}, //3
                    {0, 0, 0, 0, 0, 1, 0, 0}, //4
                    {0, 0, 0, 0, 1, 0, 0, 1}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 1, 0, 1, 0, 0}  //7
            };
            case F000T01101011 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 1, 0, 1, 0, 0, 1}, //1
                    {0, 0, 0, 0, 0, 0, 1, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 1, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 1, 0, 1, 0, 0, 1}, //6
                    {0, 0, 0, 0, 0, 0, 1, 0}  //7
            };
            case F000T00111111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 1, 0, 0, 1, 0}, //2
                    {0, 0, 1, 0, 0, 0, 0, 1}, //3
                    {0, 0, 0, 0, 0, 1, 1, 0}, //4
                    {0, 0, 0, 0, 1, 0, 0, 1}, //5
                    {0, 0, 1, 0, 1, 0, 0, 1}, //6
                    {0, 0, 0, 1, 0, 1, 1, 0}  //7
            };
            case F000T01101111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 1, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 1, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 1, 1, 0}, //4
                    {0, 1, 0, 0, 1, 0, 0, 1}, //5
                    {0, 0, 1, 0, 1, 0, 0, 1}, //6
                    {0, 0, 0, 0, 0, 1, 1, 0}  //7
            };
            case F000T01111110 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 1, 0, 1, 0, 0}, //1
                    {0, 0, 0, 1, 0, 0, 1, 0}, //2
                    {0, 1, 1, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 1, 1, 0}, //4
                    {0, 1, 0, 0, 1, 0, 0, 0}, //5
                    {0, 0, 1, 0, 1, 0, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F000T01111111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 1, 0, 1, 0, 0}, //1
                    {0, 0, 0, 1, 0, 0, 1, 0}, //2
                    {0, 1, 1, 0, 0, 0, 0, 1}, //3
                    {0, 0, 0, 0, 0, 1, 1, 0}, //4
                    {0, 1, 0, 0, 1, 0, 0, 1}, //5
                    {0, 0, 1, 0, 1, 0, 0, 1}, //6
                    {0, 0, 0, 1, 0, 1, 1, 0}  //7
            };
            case F000T11111111 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 1, 1, 0, 1, 0, 0, 0}, //0
                    {1, 0, 0, 1, 0, 1, 0, 0}, //1
                    {1, 0, 0, 1, 0, 0, 1, 0}, //2
                    {0, 1, 1, 0, 0, 0, 0, 1}, //3
                    {1, 0, 0, 0, 0, 1, 1, 0}, //4
                    {0, 1, 0, 0, 1, 0, 0, 1}, //5
                    {0, 0, 1, 0, 1, 0, 0, 1}, //6
                    {0, 0, 0, 1, 0, 1, 1, 0}  //7
            };
            case F001T01101001 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 1, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 1, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F002T01101001 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 1}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 1, 0, 0, 0, 0, 0, 0}  //7
            };
            case F010T01101001 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 1, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 1, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F020T01101001 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 1}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 1, 0, 0, 0, 0, 0}  //7
            };
            case F100T01101001 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 1, 0, 0, 0, 0, 0}, //1
                    {0, 1, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 0}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 0, 0, 0, 0, 0}  //7
            };
            case F200T01101001 -> new int[][]{
                    //0 1  2  3  4  5  6  7
                    {0, 0, 0, 0, 0, 0, 0, 0}, //0
                    {0, 0, 0, 0, 0, 0, 0, 0}, //1
                    {0, 0, 0, 0, 0, 0, 0, 0}, //2
                    {0, 0, 0, 0, 0, 0, 0, 0}, //3
                    {0, 0, 0, 0, 0, 0, 0, 1}, //4
                    {0, 0, 0, 0, 0, 0, 0, 0}, //5
                    {0, 0, 0, 0, 0, 0, 0, 0}, //6
                    {0, 0, 0, 0, 1, 0, 0, 0}  //7
            };
        };
    }

    public int[] getMaxVertexChecker(TestCase testCase) {
        return switch (testCase) {
            case F0T00, F0T11, F1T00, F1T01, F1T10, F1T11, F2T00, F2T01, F2T10, F2T11,
                    F00T0000, F00T0011, F00T0101, F00T1010, F00T1100,
                    F00T1110, F00T1101, F00T1011, F00T0111, F00T1111,
                    F20T0000, F01T0001, F10T0001, F20T0011, F10T0011,
                    F01T1110, F10T1110, F02T1111, F20T1111, F01T1111, F10T1111,
                    F000T00000000, F000T00000011, F000T00000111,
                    F000T00001111, F000T00010111, F000T00011011, F000T00111100, F000T00011111, F000T00111101,
                    F000T00111111, F000T01101111, F000T01111110, F000T01111111, F000T11111111,
                    F222T00000001, F010T00000001, F102T00000001,
                    F020T00000011, F102T00000011, F100T00000110,
                    F100T00000111, F020T00000111, F200T00000111 -> new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            case F0T10, F00T1000, F01T1001, F10T1001, F000T10000000 -> new int[]{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            case F0T01, F00T0100, F02T1110,
                    F000T01000000, F000T01101011, F110T01111111 -> new int[]{0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            case F00T0010, F01T0011, F20T1110,
                    F000T00100000, F101T01111111 -> new int[]{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0};
            case F00T0001, F20T0001, F02T0001, F02T0011, F02T1001, F20T1001,
                    F000T00010000, F000T00011110,
                    F100T00011000, F020T00011000, F002T00011000 -> new int[]{0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0};
            case F000T00001000, F000T00011001,
                    F200T00011000, F010T00011000, F001T00011000 -> new int[]{0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
            case F000T00000100, F010T00000110, F010T00000111 -> new int[]{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
            case F000T00000010,
                    F001T00000011, F020T00000110, F001T00000111 -> new int[]{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0};
            case F000T00000001, F200T00000001, F020T00000001, F002T00000001, F202T00000001,
                    F202T00000011, F002T00000011 -> new int[]{0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
            case F00T0110, F100T01101001 -> new int[]{0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0};
            case F00T1001 -> new int[]{1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0};
            case F000T00000110, F200T00000110 -> new int[]{0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0};
            case F000T00011000 -> new int[]{0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0};
            case F000T00010110 -> new int[]{0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0};
            case F000T01101001 -> new int[]{0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0};
            case F001T01101001 -> new int[]{0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0};
            case F002T01101001 -> new int[]{0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0};
            case F010T01101001 -> new int[]{0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0};
            case F020T01101001 -> new int[]{0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0};
            case F200T01101001 -> new int[]{0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0};
        };
    }

    public int getMu(TestCase testCase) {
        return switch (testCase) {
            case F0T00, F0T11, F1T00, F1T01, F1T10, F1T11, F2T00, F2T01, F2T10, F2T11,
                    F00T0000, F00T0011, F00T0101, F00T1010, F00T1100, F00T0111, F00T1011,
                    F00T1101, F00T1110, F00T1111, F20T0000, F01T0001, F10T0001, F20T0011,
                    F10T0011, F01T1110, F10T1110, F02T1111, F20T1111, F01T1111, F10T1111,
                    F000T00000000, F000T00000011, F000T00000111, F000T00001111, F000T00010111,
                    F000T00011011, F000T00111100, F000T00011111, F000T00111101, F000T00111111,
                    F000T01101111, F000T01111110, F000T01111111, F000T11111111,
                    F222T00000001, F010T00000001, F102T00000001,
                    F020T00000011, F102T00000011, F100T00000110,
                    F100T00000111, F020T00000111, F200T00000111 -> 0;
            case F0T01, F0T10,
                    F00T0110, F00T1001, F20T0001, F02T0001, F02T0011, F01T0011,
                    F02T1001, F20T1001, F01T1001, F10T1001, F02T1110, F20T1110,
                    F000T00000110, F000T00010110, F000T00011001,
                    F000T00011110, F000T01101001, F000T01101011,
                    F202T00000001, F202T00000011, F200T00000110,
                    F001T01101001, F002T01101001, F010T01101001,
                    F020T01101001, F100T01101001, F200T01101001,
                    F101T01111111, F110T01111111 -> 1;
            case F00T0001, F00T0010, F00T0100, F00T1000,
                    F000T00011000, F200T00000001, F020T00000001, F002T00000001,
                    F002T00000011, F001T00000011, F010T00000110, F020T00000110,
                    F200T00011000, F100T00011000, F020T00011000, F010T00011000,
                    F002T00011000, F001T00011000, F010T00000111, F001T00000111 -> 2;
            case F000T00000001, F000T00000010, F000T00000100, F000T00001000,
                    F000T00010000, F000T00100000, F000T01000000, F000T10000000 -> 3;
        };
    }

    private Face createFace(TestCase testCase) {
        String name = testCase.getFaceName();
        Function<Integer, Boolean> checker = getVertexChecker(testCase.getTable());
        return new Face(name, checker);
    }

    public Function<Integer, Boolean> getVertexChecker(String table) {
        return (Integer value) -> !(value < 0 || value + 1 > table.length() || table.charAt(value) == '0');
    }

    public enum TestCase {
        // 1D
        F0T00, F0T01, F0T10, F0T11, F1T00, F1T01, F1T10, F1T11, F2T00, F2T01, F2T10, F2T11,
        // 2D
        F00T0000,
        F00T0001, F00T0010, F00T0100, F00T1000,
        F00T0011, F00T0101, F00T0110, F00T1001, F00T1010, F00T1100,
        F00T1110, F00T1101, F00T1011, F00T0111, F00T1111,

        F20T0000,
        F20T0001, F02T0001, F01T0001, F10T0001,
        F02T0011, F20T0011, F10T0011, F01T0011, F02T1001, F20T1001, F01T1001, F10T1001,
        F02T1110, F20T1110, F01T1110, F10T1110,
        F02T1111, F20T1111, F01T1111, F10T1111,
        // 3D
        F000T00000000,
        F000T00000001, F000T00000010, F000T00000100, F000T00001000,
        F000T00010000, F000T00100000, F000T01000000, F000T10000000,
        F000T00000011, F000T00000110, F000T00011000,
        F000T00000111, F000T00010110, F000T00011001,
        F000T00001111, F000T00010111, F000T00011011, F000T00011110, F000T00111100, F000T01101001,
        F000T00011111, F000T00111101, F000T01101011,
        F000T00111111, F000T01101111, F000T01111110, F000T01111111, F000T11111111,

        F222T00000001, F200T00000001, F020T00000001, F002T00000001, F202T00000001, F010T00000001, F102T00000001,
        F202T00000011, F002T00000011, F001T00000011, F020T00000011, F102T00000011,
        F200T00000110, F010T00000110, F020T00000110, F100T00000110,
        F200T00011000, F100T00011000, F020T00011000, F010T00011000, F002T00011000, F001T00011000,
        F100T00000111, F010T00000111, F020T00000111, F001T00000111, F200T00000111,
        F001T01101001, F002T01101001, F010T01101001, F020T01101001, F100T01101001, F200T01101001,
        F101T01111111, F110T01111111;

        public String getFaceName() {
            String fullName = toString();
            int indexOfT = fullName.indexOf('T');
            return fullName.substring(1, indexOfT);
        }

        public String getTable() {
            String fullName = toString();
            int indexOfT = fullName.indexOf('T');
            return fullName.substring(indexOfT + 1);
        }
    }
}
